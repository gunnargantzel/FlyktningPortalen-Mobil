// MSAL Browser Library - Local Implementation
// This is a simplified local implementation for offline development

console.log('Using local MSAL implementation for offline development');

window.msal = {
    PublicClientApplication: function(config) {
        console.log('Initializing local MSAL implementation');
        
        this.config = config;
        this.accounts = [];
        this.isInitialized = false;
        
        return {
            initialize: () => {
                console.log('MSAL initialized (local mode)');
                this.isInitialized = true;
                return Promise.resolve();
            },
            
            loginPopup: (request) => {
                console.log('Login popup requested (local mode)');
                // Simulate successful login for development
                const mockAccount = {
                    localAccountId: 'dev-user-123',
                    username: 'dev@example.com',
                    name: 'Development User',
                    homeAccountId: 'dev-user-123'
                };
                this.accounts = [mockAccount];
                return Promise.resolve({
                    account: mockAccount,
                    accessToken: 'mock-access-token',
                    idToken: 'mock-id-token'
                });
            },
            
            logoutPopup: (request) => {
                console.log('Logout popup requested (local mode)');
                this.accounts = [];
                return Promise.resolve();
            },
            
            acquireTokenSilent: (request) => {
                console.log('Acquire token silent requested (local mode)');
                return Promise.resolve({
                    accessToken: 'mock-access-token',
                    account: this.accounts[0]
                });
            },
            
            getAllAccounts: () => {
                return this.accounts;
            },
            
            handleRedirectPromise: () => {
                return Promise.resolve(null);
            }
        };
    },
    
    LogLevel: { 
        Info: 0, 
        Warning: 1, 
        Error: 2 
    }
};
// MSAL Browser Library - Local Implementation
// This is a simplified local implementation for offline development

if (!window.msalInitialized) {
    window.msalInitialized = true;
    console.log('Using local MSAL implementation for offline development');

window.msal = {
    PublicClientApplication: function(config) {
        console.log('Initializing local MSAL implementation');
        
        this.config = config;
        this.accounts = [];
        this.isInitialized = false;
        
        return {
            initialize: () => {
                console.log('MSAL initialized (local mode)');
                this.isInitialized = true;
                return Promise.resolve();
            },
            
            loginPopup: (request) => {
                console.log('Login popup requested (local mode)');
                
                // Simulate a real login popup
                return new Promise((resolve, reject) => {
                    // Show a mock login dialog
                    const mockLogin = confirm('Mock Entra ID Login\n\nClick OK to login as a test user, or Cancel to cancel.');
                    
                    if (mockLogin) {
                        const mockAccount = {
                            localAccountId: 'dev-user-123',
                            username: 'test.user@example.com',
                            name: 'Test User',
                            homeAccountId: 'dev-user-123',
                            environment: 'login.microsoftonline.com',
                            tenantId: 'fb7e0b12-d8fc-4f14-bd1a-ad9c8667a7e6',
                            idTokenClaims: {
                                name: 'Test User',
                                email: 'test.user@example.com',
                                sub: 'mock-user-id'
                            }
                        };
                        this.accounts = [mockAccount];
                        resolve({
                            account: mockAccount,
                            accessToken: 'mock-access-token',
                            idToken: 'mock-id-token',
                            scopes: request.scopes || ['User.Read']
                        });
                    } else {
                        // Simulate user cancellation
                        reject(new Error('User cancelled login'));
                    }
                });
            },
            
            logoutPopup: (request) => {
                console.log('Logout popup requested (local mode)');
                this.accounts = [];
                return Promise.resolve();
            },
            
            acquireTokenSilent: (request) => {
                console.log('Acquire token silent requested (local mode)');
                return Promise.resolve({
                    accessToken: 'mock-access-token',
                    account: this.accounts[0]
                });
            },
            
            getAllAccounts: () => {
                return this.accounts;
            },
            
            handleRedirectPromise: () => {
                return Promise.resolve(null);
            }
        };
    },
    
    LogLevel: { 
        Info: 0, 
        Warning: 1, 
        Error: 2 
    }
};

} // End of msalInitialized check